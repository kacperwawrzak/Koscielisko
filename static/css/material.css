/* This is the master SCSS file 
 * from which all other SCSS files will be called.
 * Examples taken from http://sass-lang.com/guide

 */
/* TOOLBAR */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-toolbar {
  /* @alternate */
  background-color: #0e5c29;
  background-color: var(--mdc-theme-primary, #0e5c29);
  color: white;
  display: flex;
  position: relative;
  flex-direction: column;
  justify-content: space-between;
  box-sizing: border-box;
  width: 100%;
}
.mdc-toolbar__row {
  display: flex;
  position: relative;
  align-items: center;
  box-sizing: border-box;
  width: 100%;
  height: auto;
  min-height: 64px;
}
@media (max-width: 959px) and (orientation: landscape) {
  .mdc-toolbar__row {
    min-height: 48px;
  }
}
@media (max-width: 599px) {
  .mdc-toolbar__row {
    min-height: 56px;
  }
}
.mdc-toolbar__section {
  display: inline-flex;
  flex: 1;
  align-items: flex-start;
  justify-content: center;
  min-width: 0;
  height: 100%;
  z-index: 1;
}
.mdc-toolbar__section--align-start {
  justify-content: flex-start;
  order: -1;
}
.mdc-toolbar__section--align-end {
  justify-content: flex-end;
  order: 1;
}
.mdc-toolbar__title {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1.25rem;
  line-height: 2rem;
  font-weight: 500;
  letter-spacing: 0.02em;
  text-decoration: inherit;
  text-transform: inherit;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  margin-left: 24px;
  margin-right: 0;
  align-self: center;
  padding: 16px 0;
  line-height: 1.5rem;
  z-index: 1;
}
[dir="rtl"] .mdc-toolbar__title, .mdc-toolbar__title[dir="rtl"] {
  margin-left: 0;
  margin-right: 24px;
}
.mdc-toolbar__icon {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px;
  border: none;
  background-color: inherit;
  color: inherit;
  text-decoration: none;
  cursor: pointer;
  padding-right: 12px;
  padding-left: 12px;
}
.mdc-toolbar__icon:last-of-type {
  padding-left: 12px;
  padding-right: 24px;
}
[dir="rtl"] .mdc-toolbar__icon:last-of-type, .mdc-toolbar__icon:last-of-type[dir="rtl"] {
  padding-left: 24px;
  padding-right: 12px;
}
.mdc-toolbar__menu-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px;
  border: none;
  background-color: inherit;
  color: inherit;
  text-decoration: none;
  cursor: pointer;
  padding-right: 24px;
  padding-left: 24px;
}

.mdc-toolbar__menu-icon + .mdc-toolbar__title {
  margin-left: 8px;
  margin-right: 0;
}
[dir="rtl"] .mdc-toolbar__menu-icon + .mdc-toolbar__title, .mdc-toolbar__menu-icon + .mdc-toolbar__title[dir="rtl"] {
  margin-left: 0;
  margin-right: 8px;
}

@media (max-width: 599px) {
  .mdc-toolbar__title {
    margin-left: 16px;
    margin-right: 0;
  }
  [dir="rtl"] .mdc-toolbar__title, .mdc-toolbar__title[dir="rtl"] {
    margin-left: 0;
    margin-right: 16px;
  }

  .mdc-toolbar__icon {
    padding-right: 8px;
    padding-left: 8px;
  }

  .mdc-toolbar__icon:last-of-type {
    padding-left: 8px;
    padding-right: 16px;
  }
  [dir="rtl"] .mdc-toolbar__icon:last-of-type, .mdc-toolbar__icon:last-of-type[dir="rtl"] {
    padding-left: 16px;
    padding-right: 8px;
  }

  .mdc-toolbar__menu-icon {
    padding-right: 16px;
    padding-left: 16px;
  }

  .mdc-toolbar__menu-icon + .mdc-toolbar__title {
    margin-left: 16px;
    margin-right: 0;
  }
  [dir="rtl"] .mdc-toolbar__menu-icon + .mdc-toolbar__title, .mdc-toolbar__menu-icon + .mdc-toolbar__title[dir="rtl"] {
    margin-left: 0;
    margin-right: 16px;
  }
}
.mdc-toolbar--fixed {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
  position: fixed;
  top: 0;
  left: 0;
  z-index: 4;
}

.mdc-toolbar--flexible {
  --mdc-toolbar-ratio-to-extend-flexible: 4;
}
.mdc-toolbar--flexible .mdc-toolbar__row:first-child {
  height: 256px;
  height: calc(64px * var(--mdc-toolbar-ratio-to-extend-flexible, 4));
}
@media (max-width: 599px) {
  .mdc-toolbar--flexible .mdc-toolbar__row:first-child {
    height: 224px;
    height: calc(56px * var(--mdc-toolbar-ratio-to-extend-flexible, 4));
  }
}
.mdc-toolbar--flexible .mdc-toolbar__row:first-child::after {
  position: absolute;
  content: "";
}
.mdc-toolbar--flexible-default-behavior .mdc-toolbar__title {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 2.125rem;
  line-height: 2.5rem;
  font-weight: 400;
  letter-spacing: normal;
  text-decoration: inherit;
  text-transform: inherit;
  align-self: flex-end;
  line-height: 1.5rem;
}
.mdc-toolbar--flexible-default-behavior .mdc-toolbar__row:first-child::after {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: opacity .2s ease;
  opacity: 1;
}
.mdc-toolbar--flexible-default-behavior.mdc-toolbar--flexible-space-minimized .mdc-toolbar__row:first-child::after {
  opacity: 0;
}
.mdc-toolbar--flexible-default-behavior.mdc-toolbar--flexible-space-minimized .mdc-toolbar__title {
  font-weight: 500;
}

.mdc-toolbar--waterfall.mdc-toolbar--fixed {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow;
}
.mdc-toolbar--waterfall.mdc-toolbar--fixed.mdc-toolbar--flexible-space-minimized {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
}
.mdc-toolbar--waterfall.mdc-toolbar--fixed.mdc-toolbar--fixed-lastrow-only.mdc-toolbar--flexible-space-minimized {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
}
.mdc-toolbar--waterfall.mdc-toolbar--fixed.mdc-toolbar--fixed-lastrow-only.mdc-toolbar--fixed-at-last-row {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
}

.mdc-toolbar-fixed-adjust {
  margin-top: 64px;
}
@media (max-width: 959px) and (max-height: 599px) {
  .mdc-toolbar-fixed-adjust {
    margin-top: 48px;
  }
}
@media (max-width: 599px) {
  .mdc-toolbar-fixed-adjust {
    margin-top: 56px;
  }
}

.mdc-toolbar__section--shrink-to-fit {
  flex: none;
}

/* DRAWER */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.mdc-drawer--temporary {
  /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
  color: rgba(0, 0, 0, 0.87);
  position: fixed;
  top: 0;
  left: 0;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  pointer-events: none;
  overflow: hidden;
  contain: strict;
  z-index: 5;
  /* Shaded background */
}
.mdc-drawer--temporary .mdc-drawer__toolbar-spacer {
  display: flex;
  position: relative;
  flex-direction: row;
  flex-shrink: 0;
  align-items: center;
  box-sizing: border-box;
  height: 56px;
  padding: 16px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
  /* TODO(sgomes): replace with global breakpoints when we have them */
}
.mdc-drawer--temporary .mdc-drawer__toolbar-spacer--theme-dark .mdc-drawer--temporary .mdc-drawer__toolbar-spacer, .mdc-theme--dark .mdc-drawer--temporary .mdc-drawer__toolbar-spacer {
  border-bottom: 1px solid rgba(255, 255, 255, 0.12);
}
@media (min-width: 600px) {
  .mdc-drawer--temporary .mdc-drawer__toolbar-spacer {
    height: 64px;
  }
}
.mdc-drawer--temporary .mdc-drawer__header {
  position: relative;
}
.mdc-drawer--temporary .mdc-drawer__header::before {
  display: block;
  padding-top: 56.25%;
  content: "";
}
.mdc-drawer--temporary .mdc-drawer__header-content {
  display: flex;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  align-items: flex-end;
  box-sizing: border-box;
  padding: 16px;
}
.mdc-drawer--temporary .mdc-list-item {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.5rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  position: relative;
  outline: none;
  color: inherit;
  text-decoration: none;
}
.mdc-drawer--temporary .mdc-list-item__graphic {
  color: rgba(0, 0, 0, 0.54);
}
.mdc-drawer--temporary .mdc-list-item__graphic--theme-dark .mdc-drawer--temporary .mdc-list-item__graphic, .mdc-theme--dark .mdc-drawer--temporary .mdc-list-item__graphic {
  color: rgba(255, 255, 255, 0.54);
}
.mdc-drawer--temporary.mdc-drawer--permanent,
.mdc-drawer--temporary .mdc-drawer__drawer {
  background-color: #fff;
}
.mdc-drawer--temporary::before {
  background-color: rgba(0, 0, 0, 0.6);
}
.mdc-drawer--temporary::before {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  opacity: 0;
  opacity: var(--mdc-temporary-drawer-opacity, 0);
  content: "";
  will-change: opacity;
}
.mdc-drawer--temporary .mdc-drawer__drawer {
  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);
  left: 0;
  right: initial;
  height: 100%;
  transform: translateX(-107%);
  transform: translateX(calc(-100% - 20px));
  will-change: transform;
  display: flex;
  position: absolute;
  flex-direction: column;
  box-sizing: border-box;
  width: calc(100% - 56px);
  max-width: 280px;
  overflow: hidden;
  touch-action: none;
  /* TODO(sgomes): replace with global breakpoints when we have them */
}
[dir="rtl"] .mdc-drawer--temporary .mdc-drawer__drawer, .mdc-drawer--temporary .mdc-drawer__drawer[dir="rtl"] {
  left: initial;
  right: 0;
}
.mdc-drawer--temporary--theme-dark .mdc-drawer--temporary .mdc-drawer__drawer, .mdc-theme--dark .mdc-drawer--temporary .mdc-drawer__drawer {
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-dark, white);
  background: #303030;
}
[dir="rtl"] .mdc-drawer--temporary .mdc-drawer--temporary .mdc-drawer__drawer, .mdc-drawer--temporary[dir="rtl"] .mdc-drawer--temporary .mdc-drawer__drawer {
  transform: translateX(107%);
  transform: translateX(calc(100% + 20px));
}
@media (min-width: 600px) {
  .mdc-drawer--temporary .mdc-drawer__drawer {
    width: calc(100% - 64px);
    max-width: 320px;
  }
}
.mdc-drawer--temporary .mdc-drawer__content {
  flex-grow: 1;
  box-sizing: border-box;
  margin: 0;
  overflow-x: hidden;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  touch-action: pan-y;
}
.mdc-drawer--temporary .mdc-drawer__footer {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  flex-shrink: 0;
}
.mdc-drawer--temporary.mdc-drawer--animating::before {
  transition: opacity 0.3s 0ms cubic-bezier(0, 0, 0.2, 1);
}
.mdc-drawer--temporary.mdc-drawer--animating.mdc-drawer--open .mdc-drawer__drawer {
  transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1);
}
.mdc-drawer--temporary.mdc-drawer--animating .mdc-drawer__drawer {
  transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1);
}
.mdc-drawer--temporary.mdc-drawer--open {
  pointer-events: auto;
}
.mdc-drawer--temporary.mdc-drawer--open::before {
  opacity: 1;
  opacity: var(--mdc-temporary-drawer-opacity, 1);
}
.mdc-drawer--temporary.mdc-drawer--open .mdc-drawer__drawer {
  transform: none;
}
[dir="rtl"] .mdc-drawer--temporary.mdc-drawer--open .mdc-drawer__drawer, .mdc-drawer--temporary.mdc-drawer--open[dir="rtl"] .mdc-drawer__drawer {
  transform: none;
}

.mdc-drawer-scroll-lock {
  overflow: hidden;
}

/* BUTTON */
@keyframes mdc-ripple-fg-radius-in {
  from {
    animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
  }
  to {
    transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  }
}
@keyframes mdc-ripple-fg-opacity-in {
  from {
    animation-timing-function: linear;
    opacity: 0;
  }
  to {
    opacity: var(--mdc-ripple-fg-opacity, 0.16);
  }
}
@keyframes mdc-ripple-fg-opacity-out {
  from {
    animation-timing-function: linear;
    opacity: var(--mdc-ripple-fg-opacity, 0.16);
  }
  to {
    opacity: 0;
  }
}
.mdc-ripple-surface--test-edge-var-bug {
  --mdc-ripple-surface-test-edge-var: 1px solid #000;
  visibility: hidden;
}
.mdc-ripple-surface--test-edge-var-bug::before {
  border: var(--mdc-ripple-surface-test-edge-var);
}

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-button {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 2.25rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: none;
  text-transform: uppercase;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  display: inline-block;
  position: relative;
  box-sizing: border-box;
  min-width: 64px;
  height: 36px;
  padding: 0 16px;
  border: none;
  outline: none;
  text-align: center;
  user-select: none;
  -webkit-appearance: none;
  overflow: hidden;
  vertical-align: middle;
  border-radius: 2px;
}
.mdc-button::before, .mdc-button::after {
  position: absolute;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
}
.mdc-button::before {
  transition: opacity 15ms linear;
}
.mdc-button.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  transform: scale(0);
  transform-origin: center center;
}
.mdc-button.mdc-ripple-upgraded--unbounded::after {
  top: var(--mdc-ripple-top, 0);
  left: var(--mdc-ripple-left, 0);
}
.mdc-button.mdc-ripple-upgraded--foreground-activation::after {
  animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-button.mdc-ripple-upgraded--foreground-deactivation::after {
  animation: 150ms mdc-ripple-fg-opacity-out;
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
}
.mdc-button::before, .mdc-button::after {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
}
.mdc-button.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-button.mdc-ripple-upgraded--unbounded::before {
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-button.mdc-ripple-upgraded::after {
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
}
.mdc-button:active {
  outline: none;
}
.mdc-button:hover {
  cursor: pointer;
}
.mdc-button::-moz-focus-inner {
  padding: 0;
  border: 0;
}
.mdc-button:disabled {
  background-color: transparent;
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
  cursor: default;
  pointer-events: none;
}
.mdc-button--theme-dark .mdc-button:disabled, .mdc-theme--dark .mdc-button:disabled {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5);
  color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5));
}
.mdc-button:not(:disabled) {
  background-color: transparent;
}
.mdc-button:not(:disabled) {
  /* @alternate */
  color: #0e5c29;
  color: var(--mdc-theme-primary, #0e5c29);
}
.mdc-button::before, .mdc-button::after {
  /* @alternate */
  background-color: #0e5c29;
}
@supports not (-ms-ime-align: auto) {
  .mdc-button::before, .mdc-button::after {
    background-color: var(--mdc-theme-primary, #0e5c29);
  }
}
.mdc-button:hover::before {
  opacity: 0.04;
}
.mdc-button:not(.mdc-ripple-upgraded):focus::before, .mdc-button.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.12;
}
.mdc-button:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-button:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.16;
}
.mdc-button.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}

.mdc-button--raised:disabled, .mdc-button--unelevated:disabled {
  background-color: rgba(0, 0, 0, 0.12);
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
}
.mdc-button--theme-dark .mdc-button--raised:disabled, .mdc-theme--dark .mdc-button--raised:disabled,
.mdc-button--theme-dark .mdc-button--unelevated:disabled, .mdc-theme--dark .mdc-button--unelevated:disabled {
  background-color: rgba(255, 255, 255, 0.12);
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
}
.mdc-button--raised:not(:disabled),
.mdc-button--unelevated:not(:disabled) {
  /* @alternate */
  background-color: #0e5c29;
}
@supports not (-ms-ime-align: auto) {
  .mdc-button--raised:not(:disabled),
  .mdc-button--unelevated:not(:disabled) {
    background-color: var(--mdc-theme-primary, #0e5c29);
  }
}
.mdc-button--raised:not(:disabled),
.mdc-button--unelevated:not(:disabled) {
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white);
}
.mdc-button--raised::before, .mdc-button--raised::after,
.mdc-button--unelevated::before,
.mdc-button--unelevated::after {
  /* @alternate */
  background-color: white;
}
@supports not (-ms-ime-align: auto) {
  .mdc-button--raised::before, .mdc-button--raised::after,
  .mdc-button--unelevated::before,
  .mdc-button--unelevated::after {
    background-color: var(--mdc-theme-text-primary-on-primary, white);
  }
}
.mdc-button--raised:hover::before,
.mdc-button--unelevated:hover::before {
  opacity: 0.08;
}
.mdc-button--raised:not(.mdc-ripple-upgraded):focus::before, .mdc-button--raised.mdc-ripple-upgraded--background-focused::before,
.mdc-button--unelevated:not(.mdc-ripple-upgraded):focus::before,
.mdc-button--unelevated.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.24;
}
.mdc-button--raised:not(.mdc-ripple-upgraded)::after,
.mdc-button--unelevated:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-button--raised:not(.mdc-ripple-upgraded):active::after,
.mdc-button--unelevated:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.32;
}
.mdc-button--raised.mdc-ripple-upgraded,
.mdc-button--unelevated.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}

.mdc-button--raised {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
}
.mdc-button--raised:hover, .mdc-button--raised:focus {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
}
.mdc-button--raised:active {
  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);
}
.mdc-button--raised:disabled {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
}

.mdc-button--stroked {
  border-style: solid;
  padding-right: 14px;
  padding-left: 14px;
  border-width: 2px;
  line-height: 32px;
}
.mdc-button--stroked:disabled {
  /* @alternate */
  border-color: rgba(0, 0, 0, 0.38);
  border-color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
}
.mdc-button--theme-dark .mdc-button--stroked:disabled, .mdc-theme--dark .mdc-button--stroked:disabled {
  /* @alternate */
  border-color: rgba(255, 255, 255, 0.5);
  border-color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5));
}
.mdc-button--stroked.mdc-button--dense {
  line-height: 27px;
}
.mdc-button--stroked.mdc-button--compact {
  padding-right: 6px;
  padding-left: 6px;
}
.mdc-button--stroked:not(:disabled) {
  /* @alternate */
  border-color: #0e5c29;
  border-color: var(--mdc-theme-primary, #0e5c29);
}

.mdc-button--compact {
  padding: 0 8px;
}

.mdc-button--dense {
  height: 32px;
  font-size: .8125rem;
  line-height: 32px;
}

.mdc-button__icon {
  display: inline-block;
  width: 18px;
  height: 18px;
  margin-right: 8px;
  font-size: 18px;
  line-height: inherit;
  vertical-align: top;
}

/* FLOATING ACTION BUTTONS */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
.mdc-fab {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);
  display: inline-flex;
  position: relative;
  justify-content: center;
  box-sizing: border-box;
  width: 56px;
  height: 56px;
  padding: 0;
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), opacity 15ms linear 30ms, transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1);
  border: none;
  border-radius: 50%;
  fill: currentColor;
  cursor: pointer;
  user-select: none;
  -moz-appearance: none;
  -webkit-appearance: none;
  overflow: hidden;
  /* @alternate */
  background-color: #018786;
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-secondary, white);
}
.mdc-fab::before, .mdc-fab::after {
  position: absolute;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
}
.mdc-fab::before {
  transition: opacity 15ms linear;
}
.mdc-fab.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  transform: scale(0);
  transform-origin: center center;
}
.mdc-fab.mdc-ripple-upgraded--unbounded::after {
  top: var(--mdc-ripple-top, 0);
  left: var(--mdc-ripple-left, 0);
}
.mdc-fab.mdc-ripple-upgraded--foreground-activation::after {
  animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-fab.mdc-ripple-upgraded--foreground-deactivation::after {
  animation: 150ms mdc-ripple-fg-opacity-out;
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
}
.mdc-fab::before, .mdc-fab::after {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
}
.mdc-fab.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-fab.mdc-ripple-upgraded--unbounded::before {
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-fab.mdc-ripple-upgraded::after {
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
}
.mdc-fab:hover, .mdc-fab:focus {
  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);
}
.mdc-fab:active {
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);
}
.mdc-fab:active, .mdc-fab:focus {
  outline: none;
}
.mdc-fab:hover {
  cursor: pointer;
}
.mdc-fab::-moz-focus-inner {
  padding: 0;
  border: 0;
}
.mdc-fab > svg {
  width: 100%;
}
@supports not (-ms-ime-align: auto) {
  .mdc-fab {
    background-color: var(--mdc-theme-secondary, #018786);
  }
}
.mdc-fab::before, .mdc-fab::after {
  /* @alternate */
  background-color: white;
}
@supports not (-ms-ime-align: auto) {
  .mdc-fab::before, .mdc-fab::after {
    background-color: var(--mdc-theme-text-primary-on-secondary, white);
  }
}
.mdc-fab:hover::before {
  opacity: 0.08;
}
.mdc-fab:not(.mdc-ripple-upgraded):focus::before, .mdc-fab.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.24;
}
.mdc-fab:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-fab:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.32;
}
.mdc-fab.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}

.mdc-fab--mini {
  width: 40px;
  height: 40px;
}

.mdc-fab__icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  transition: transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);
  will-change: transform;
}

.mdc-fab--exited {
  transform: scale(0);
  transition: opacity 15ms linear 150ms, transform 180ms 0ms cubic-bezier(0.4, 0, 1, 1);
  opacity: 0;
}
.mdc-fab--exited .mdc-fab__icon {
  transform: scale(0);
  transition: transform 135ms 0ms cubic-bezier(0.4, 0, 1, 1);
}

/* RIPPLE */
.mdc-ripple-surface {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  position: relative;
  outline: none;
  overflow: hidden;
}
.mdc-ripple-surface::before, .mdc-ripple-surface::after {
  position: absolute;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
}
.mdc-ripple-surface::before {
  transition: opacity 15ms linear;
}
.mdc-ripple-surface.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  transform: scale(0);
  transform-origin: center center;
}
.mdc-ripple-surface.mdc-ripple-upgraded--unbounded::after {
  top: var(--mdc-ripple-top, 0);
  left: var(--mdc-ripple-left, 0);
}
.mdc-ripple-surface.mdc-ripple-upgraded--foreground-activation::after {
  animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-ripple-surface.mdc-ripple-upgraded--foreground-deactivation::after {
  animation: 150ms mdc-ripple-fg-opacity-out;
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
}
.mdc-ripple-surface::before, .mdc-ripple-surface::after {
  background-color: black;
}
.mdc-ripple-surface:hover::before {
  opacity: 0.04;
}
.mdc-ripple-surface:not(.mdc-ripple-upgraded):focus::before, .mdc-ripple-surface.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.12;
}
.mdc-ripple-surface:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-ripple-surface:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.16;
}
.mdc-ripple-surface.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}
.mdc-ripple-surface::before, .mdc-ripple-surface::after {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
}
.mdc-ripple-surface.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-ripple-surface.mdc-ripple-upgraded--unbounded::before {
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-ripple-surface.mdc-ripple-upgraded::after {
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
}
.mdc-ripple-surface[data-mdc-ripple-is-unbounded] {
  overflow: visible;
}
.mdc-ripple-surface--primary::before, .mdc-ripple-surface--primary::after {
  /* @alternate */
  background-color: #0e5c29;
}
@supports not (-ms-ime-align: auto) {
  .mdc-ripple-surface--primary::before, .mdc-ripple-surface--primary::after {
    background-color: var(--mdc-theme-primary, #0e5c29);
  }
}
.mdc-ripple-surface--primary:hover::before {
  opacity: 0.04;
}
.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):focus::before, .mdc-ripple-surface--primary.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.12;
}
.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.16;
}
.mdc-ripple-surface--primary.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}
.mdc-ripple-surface--accent::before, .mdc-ripple-surface--accent::after {
  /* @alternate */
  background-color: #018786;
}
@supports not (-ms-ime-align: auto) {
  .mdc-ripple-surface--accent::before, .mdc-ripple-surface--accent::after {
    background-color: var(--mdc-theme-secondary, #018786);
  }
}
.mdc-ripple-surface--accent:hover::before {
  opacity: 0.04;
}
.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):focus::before, .mdc-ripple-surface--accent.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.12;
}
.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.16;
}
.mdc-ripple-surface--accent.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}

/* ELEVATION */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
.mdc-elevation--z0 {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z1 {
  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z2 {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z3 {
  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z4 {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z5 {
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z6 {
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z7 {
  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z8 {
  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z9 {
  box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z10 {
  box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z11 {
  box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z12 {
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z13 {
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z14 {
  box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z15 {
  box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z16 {
  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z17 {
  box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z18 {
  box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z19 {
  box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z20 {
  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z21 {
  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z22 {
  box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z23 {
  box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z24 {
  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);
}

.mdc-elevation-transition {
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow;
}

/* TEXTFIELD */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-text-field__bottom-line {
  /* @alternate */
  background-color: #0e5c29;
  background-color: var(--mdc-theme-primary, #0e5c29);
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 2px;
  transform: scaleX(0);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  z-index: 2;
}
.mdc-text-field__bottom-line--active {
  transform: scaleX(1);
}
.mdc-text-field .mdc-text-field__input:focus ~ .mdc-text-field__bottom-line {
  opacity: 1;
}

.mdc-text-field-helper-text {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-hint-on-light, rgba(0, 0, 0, 0.38));
  margin: 0;
  transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  font-size: .75rem;
  will-change: opacity;
}
.mdc-text-field-helper-text--theme-dark, .mdc-theme--dark .mdc-text-field-helper-text {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5);
  color: var(--mdc-theme-text-hint-on-dark, rgba(255, 255, 255, 0.5));
}
.mdc-text-field + .mdc-text-field-helper-text {
  margin-bottom: 8px;
}

.mdc-text-field-helper-text--persistent {
  transition: none;
  opacity: 1;
  will-change: initial;
}

.mdc-text-field--with-leading-icon .mdc-text-field__icon, .mdc-text-field--with-trailing-icon .mdc-text-field__icon {
  position: absolute;
  bottom: 16px;
  cursor: pointer;
}
.mdc-text-field--theme-dark .mdc-text-field--with-leading-icon .mdc-text-field__icon, .mdc-theme--dark .mdc-text-field--with-leading-icon .mdc-text-field__icon,
.mdc-text-field--theme-dark .mdc-text-field--with-trailing-icon .mdc-text-field__icon, .mdc-theme--dark .mdc-text-field--with-trailing-icon .mdc-text-field__icon {
  /* @alternate */
  color: rgba(255, 255, 255, 0.7);
  color: var(--mdc-theme-text-secondary-on-dark, rgba(255, 255, 255, 0.7));
}

.mdc-text-field__icon:not([tabindex]),
.mdc-text-field__icon[tabindex="-1"] {
  cursor: default;
  pointer-events: none;
}

/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
@keyframes invalid-shake-float-above-standard {
  0% {
    transform: translateX(0) translateY(-100%) scale(0.75);
  }
  33% {
    animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
    transform: translateX(5px) translateY(-100%) scale(0.75);
  }
  66% {
    animation-timing-function: cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);
    transform: translateX(-5px) translateY(-100%) scale(0.75);
  }
  100% {
    transform: translateX(0) translateY(-100%) scale(0.75);
  }
}
@keyframes invalid-shake-float-above-box {
  0% {
    transform: translateX(0) translateY(-50%) scale(0.75);
  }
  33% {
    animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
    transform: translateX(5px) translateY(-50%) scale(0.75);
  }
  66% {
    animation-timing-function: cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);
    transform: translateX(-5px) translateY(-50%) scale(0.75);
  }
  100% {
    transform: translateX(0) translateY(-50%) scale(0.75);
  }
}
.mdc-text-field__label {
  position: absolute;
  bottom: 8px;
  left: 0;
  transform-origin: left top;
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), color 180ms cubic-bezier(0.4, 0, 0.2, 1);
  color: rgba(0, 0, 0, 0.6);
  cursor: text;
}
[dir="rtl"] .mdc-text-field .mdc-text-field__label, .mdc-text-field[dir="rtl"] .mdc-text-field__label {
  right: 0;
  left: auto;
  transform-origin: right top;
}
.mdc-text-field--theme-dark .mdc-text-field__label, .mdc-theme--dark .mdc-text-field__label {
  color: rgba(255, 255, 255, 0.6);
}
.mdc-text-field__label--float-above {
  transform: translateY(-100%) scale(0.75, 0.75);
  cursor: auto;
}

.mdc-text-field__label--float-above.mdc-text-field__label--shake {
  animation: invalid-shake-float-above-standard 250ms 1;
}

.mdc-text-field__idle-outline {
  border-radius: 4px;
  position: absolute;
  top: 0;
  left: 0;
  width: calc(100% - 4px);
  height: calc(100% - 4px);
  transition: opacity 100ms ease;
  border: 1px solid rgba(0, 0, 0, 0.12);
  opacity: 1;
}

.mdc-text-field__outline {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  /* @alternate */
  color: #0e5c29;
  color: var(--mdc-theme-primary, #0e5c29);
  border-radius: 4px;
  position: absolute;
  top: 0;
  left: 0;
  width: calc(100% - 1px);
  height: calc(100% - 2px);
  transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  overflow: hidden;
}
.mdc-text-field__outline::before, .mdc-text-field__outline::after {
  position: absolute;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
}
.mdc-text-field__outline::before {
  transition: opacity 15ms linear;
}
.mdc-text-field__outline.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  transform: scale(0);
  transform-origin: center center;
}
.mdc-text-field__outline.mdc-ripple-upgraded--unbounded::after {
  top: var(--mdc-ripple-top, 0);
  left: var(--mdc-ripple-left, 0);
}
.mdc-text-field__outline.mdc-ripple-upgraded--foreground-activation::after {
  animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-text-field__outline.mdc-ripple-upgraded--foreground-deactivation::after {
  animation: 150ms mdc-ripple-fg-opacity-out;
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
}
.mdc-text-field__outline::before, .mdc-text-field__outline::after {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
}
.mdc-text-field__outline.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-text-field__outline.mdc-ripple-upgraded--unbounded::before {
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-text-field__outline.mdc-ripple-upgraded::after {
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
}
.mdc-text-field__outline::before, .mdc-text-field__outline::after {
  /* @alternate */
  background-color: rgba(0, 0, 0, 0.87);
}
@supports not (-ms-ime-align: auto) {
  .mdc-text-field__outline::before, .mdc-text-field__outline::after {
    background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  }
}
.mdc-text-field__outline:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-text-field__outline:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.16;
}
.mdc-text-field__outline.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}
.mdc-text-field__outline svg {
  position: absolute;
  width: 100%;
  height: 100%;
}
.mdc-text-field__outline svg .mdc-text-field__outline-path {
  stroke: rgba(0, 0, 0, 0.12);
  stroke-width: 1px;
  transition: stroke 180ms cubic-bezier(0.4, 0, 0.2, 1), stroke-width 180ms cubic-bezier(0.4, 0, 0.2, 1), opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  fill: transparent;
}

@keyframes invalid-shake-float-above-standard {
  0% {
    transform: translateX(0) translateY(-100%) scale(0.75);
  }
  33% {
    animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
    transform: translateX(5px) translateY(-100%) scale(0.75);
  }
  66% {
    animation-timing-function: cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);
    transform: translateX(-5px) translateY(-100%) scale(0.75);
  }
  100% {
    transform: translateX(0) translateY(-100%) scale(0.75);
  }
}
@keyframes invalid-shake-float-above-box {
  0% {
    transform: translateX(0) translateY(-50%) scale(0.75);
  }
  33% {
    animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
    transform: translateX(5px) translateY(-50%) scale(0.75);
  }
  66% {
    animation-timing-function: cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);
    transform: translateX(-5px) translateY(-50%) scale(0.75);
  }
  100% {
    transform: translateX(0) translateY(-50%) scale(0.75);
  }
}
@keyframes invalid-shake-float-above-outlined {
  0% {
    transform: translateX(0) translateY(-130%) scale(0.75);
  }
  33% {
    animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
    transform: translateX(5px) translateY(-130%) scale(0.75);
  }
  66% {
    animation-timing-function: cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);
    transform: translateX(-5px) translateY(-130%) scale(0.75);
  }
  100% {
    transform: translateX(0) translateY(-130%) scale(0.75);
  }
}
@keyframes invalid-shake-float-above-outlined-dense {
  0% {
    transform: translateX(0) translateY(-138%) scale(0.923);
  }
  33% {
    animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
    transform: translateX(5px) translateY(-138%) scale(0.923);
  }
  66% {
    animation-timing-function: cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);
    transform: translateX(-5px) translateY(-138%) scale(0.923);
  }
  100% {
    transform: translateX(0) translateY(-138%) scale(0.923);
  }
}
.mdc-text-field {
  display: inline-block;
  position: relative;
  margin-bottom: 8px;
  will-change: opacity, transform, color;
}

.mdc-text-field__input {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  letter-spacing: 0.04em;
  width: 100%;
  padding: 0 0 8px;
  transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  border: none;
  border-bottom: 1px solid rgba(0, 0, 0, 0.5);
  border-radius: 0;
  background: none;
  font-size: inherit;
  appearance: none;
}
.mdc-text-field__input::placeholder {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-hint-on-light, rgba(0, 0, 0, 0.38));
  transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 1;
}
.mdc-text-field__input:hover {
  border-color: black;
}
.mdc-text-field__input:focus {
  outline: none;
}
.mdc-text-field__input:focus::placeholder {
  color: rgba(0, 0, 0, 0.38);
}
.mdc-text-field__input:invalid {
  box-shadow: none;
}
.mdc-text-field__input--theme-dark, .mdc-theme--dark .mdc-text-field__input {
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-dark, white);
  border-bottom: 1px solid rgba(255, 255, 255, 0.5);
}
.mdc-text-field__input--theme-dark:hover, .mdc-theme--dark .mdc-text-field__input:hover {
  border-bottom: 1px solid white;
}
.mdc-text-field__input--theme-dark::placeholder, .mdc-theme--dark .mdc-text-field__input::placeholder {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5);
  color: var(--mdc-theme-text-hint-on-dark, rgba(255, 255, 255, 0.5));
}
.mdc-text-field__input--theme-dark:focus::placeholder, .mdc-theme--dark .mdc-text-field__input:focus::placeholder {
  color: rgba(255, 255, 255, 0.3);
}

.mdc-text-field__input:-webkit-autofill + .mdc-text-field__label {
  transform: translateY(-100%) scale(0.75, 0.75);
  cursor: auto;
}

.mdc-text-field--outlined {
  height: 56px;
  border: none;
}
.mdc-text-field--outlined .mdc-text-field__input {
  display: flex;
  height: 30px;
  padding: 12px;
  border: none;
  background-color: transparent;
  z-index: 1;
}
.mdc-text-field--outlined .mdc-text-field__input:hover ~ .mdc-text-field__idle-outline {
  border: 1px solid rgba(0, 0, 0, 0.87);
}
.mdc-text-field--outlined .mdc-text-field__label {
  left: 16px;
  right: initial;
  position: absolute;
  bottom: 20px;
  transition: transform 260ms ease;
}
[dir="rtl"] .mdc-text-field--outlined .mdc-text-field__label, .mdc-text-field--outlined .mdc-text-field__label[dir="rtl"] {
  left: initial;
  right: 16px;
}
.mdc-text-field--outlined .mdc-text-field__label--float-above {
  transform: scale(0.75) translateY(-170%);
}
.mdc-text-field--outlined .mdc-text-field__label--float-above.mdc-text-field__label--shake {
  animation: invalid-shake-float-above-outlined 250ms 1;
}
.mdc-text-field--outlined .mdc-text-field__icon {
  z-index: 2;
}
.mdc-text-field--outlined .mdc-text-field__icon:hover ~ .mdc-text-field__idle-outline {
  border: 1px solid rgba(0, 0, 0, 0.87);
}
.mdc-text-field--outlined.mdc-text-field--focused .mdc-text-field__idle-outline,
.mdc-text-field--outlined .mdc-text-field__label--float-above ~ .mdc-text-field__idle-outline {
  opacity: 0;
}
.mdc-text-field--outlined.mdc-text-field--focused .mdc-text-field__outline,
.mdc-text-field--outlined .mdc-text-field__label--float-above ~ .mdc-text-field__outline {
  opacity: 1;
}
.mdc-text-field--outlined.mdc-text-field--focused .mdc-text-field__outline-path {
  /* @alternate */
  stroke: #0e5c29;
  stroke: var(--mdc-theme-primary, #0e5c29);
  stroke-width: 2px;
}
.mdc-text-field--outlined:not(.mdc-text-field--invalid).mdc-text-field--focused .mdc-text-field__label {
  /* @alternate */
  color: #0e5c29;
  color: var(--mdc-theme-primary, #0e5c29);
}
.mdc-text-field--outlined:not(.mdc-text-field--invalid) .mdc-text-field__input:hover ~ .mdc-text-field__outline .mdc-text-field__outline-path {
  stroke: rgba(0, 0, 0, 0.87);
}
.mdc-text-field--outlined.mdc-text-field--disabled {
  color: rgba(0, 0, 0, 0.38);
}
.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__input {
  border-bottom: none;
}
.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__outline-path {
  stroke: rgba(0, 0, 0, 0.06);
  stroke-width: 1px;
}
.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__idle-outline {
  border-color: rgba(0, 0, 0, 0.06);
}
.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__label {
  bottom: 20px;
}
.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__icon {
  color: rgba(0, 0, 0, 0.3);
}
.mdc-text-field--outlined.mdc-text-field--dense {
  height: 48px;
}
.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__input {
  padding: 12px 12px 7px;
}
.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__label {
  bottom: 18px;
}
.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__label--float-above {
  transform: translateY(calc(-122% - 2px)) scale(0.923);
}
.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__label--float-above.mdc-text-field__label--shake {
  animation: invalid-shake-float-above-outlined-dense 250ms 1;
}
.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__icon {
  top: 12px;
}

.mdc-text-field--box {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  border-radius: 4px 4px 0 0;
  display: inline-flex;
  position: relative;
  height: 56px;
  margin-top: 16px;
  background-color: rgba(0, 0, 0, 0.04);
  overflow: hidden;
}
.mdc-text-field--box::before, .mdc-text-field--box::after {
  position: absolute;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
}
.mdc-text-field--box::before {
  transition: opacity 15ms linear;
}
.mdc-text-field--box.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  transform: scale(0);
  transform-origin: center center;
}
.mdc-text-field--box.mdc-ripple-upgraded--unbounded::after {
  top: var(--mdc-ripple-top, 0);
  left: var(--mdc-ripple-left, 0);
}
.mdc-text-field--box.mdc-ripple-upgraded--foreground-activation::after {
  animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-text-field--box.mdc-ripple-upgraded--foreground-deactivation::after {
  animation: 150ms mdc-ripple-fg-opacity-out;
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
}
.mdc-text-field--box::before, .mdc-text-field--box::after {
  /* @alternate */
  background-color: rgba(0, 0, 0, 0.87);
}
@supports not (-ms-ime-align: auto) {
  .mdc-text-field--box::before, .mdc-text-field--box::after {
    background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  }
}
.mdc-text-field--box:hover::before {
  opacity: 0.04;
}
.mdc-text-field--box:not(.mdc-ripple-upgraded):focus::before, .mdc-text-field--box:not(.mdc-ripple-upgraded):focus-within::before, .mdc-text-field--box.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.12;
}
.mdc-text-field--box:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-text-field--box:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.16;
}
.mdc-text-field--box.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}
.mdc-text-field--box::before, .mdc-text-field--box::after {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
}
.mdc-text-field--box.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-text-field--box.mdc-ripple-upgraded--unbounded::before {
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-text-field--box.mdc-ripple-upgraded::after {
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
}
.mdc-text-field--theme-dark.mdc-text-field--box, .mdc-theme--dark .mdc-text-field--box {
  background-color: rgba(255, 255, 255, 0.1);
}
.mdc-text-field--theme-dark.mdc-text-field--box::before, .mdc-text-field--theme-dark.mdc-text-field--box::after, .mdc-theme--dark .mdc-text-field--box::before, .mdc-theme--dark .mdc-text-field--box::after {
  /* @alternate */
  background-color: white;
}
@supports not (-ms-ime-align: auto) {
  .mdc-text-field--theme-dark.mdc-text-field--box::before, .mdc-text-field--theme-dark.mdc-text-field--box::after, .mdc-theme--dark .mdc-text-field--box::before, .mdc-theme--dark .mdc-text-field--box::after {
    background-color: var(--mdc-theme-text-primary-on-dark, white);
  }
}
.mdc-text-field--theme-dark.mdc-text-field--box:hover::before, .mdc-theme--dark .mdc-text-field--box:hover::before {
  opacity: 0.08;
}
.mdc-text-field--theme-dark.mdc-text-field--box:not(.mdc-ripple-upgraded):focus::before, .mdc-text-field--theme-dark.mdc-text-field--box:not(.mdc-ripple-upgraded):focus-within::before, .mdc-text-field--theme-dark.mdc-text-field--box.mdc-ripple-upgraded--background-focused::before, .mdc-theme--dark .mdc-text-field--box:not(.mdc-ripple-upgraded):focus::before, .mdc-theme--dark .mdc-text-field--box:not(.mdc-ripple-upgraded):focus-within::before, .mdc-theme--dark .mdc-text-field--box.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.24;
}
.mdc-text-field--theme-dark.mdc-text-field--box:not(.mdc-ripple-upgraded)::after, .mdc-theme--dark .mdc-text-field--box:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-text-field--theme-dark.mdc-text-field--box:not(.mdc-ripple-upgraded):active::after, .mdc-theme--dark .mdc-text-field--box:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.32;
}
.mdc-text-field--theme-dark.mdc-text-field--box.mdc-ripple-upgraded, .mdc-theme--dark .mdc-text-field--box.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}
.mdc-text-field--box .mdc-text-field__input {
  align-self: flex-end;
  box-sizing: border-box;
  height: 100%;
  padding: 20px 16px 0;
}
.mdc-text-field--box .mdc-text-field__label {
  left: 16px;
  right: initial;
  position: absolute;
  bottom: 20px;
  width: calc(100% - 48px);
  color: rgba(0, 0, 0, 0.6);
  text-overflow: ellipsis;
  white-space: nowrap;
  pointer-events: none;
  overflow: hidden;
  will-change: transform;
}
[dir="rtl"] .mdc-text-field--box .mdc-text-field__label, .mdc-text-field--box .mdc-text-field__label[dir="rtl"] {
  left: initial;
  right: 16px;
}
.mdc-text-field--theme-dark .mdc-text-field--box .mdc-text-field__label, .mdc-theme--dark .mdc-text-field--box .mdc-text-field__label {
  /* @alternate */
  color: rgba(255, 255, 255, 0.7);
  color: var(--mdc-theme-text-secondary-on-dark, rgba(255, 255, 255, 0.7));
}
.mdc-text-field--box .mdc-text-field__label--float-above {
  transform: translateY(-50%) scale(0.75, 0.75);
}
.mdc-text-field--box .mdc-text-field__label--float-above.mdc-text-field__label--shake {
  animation: invalid-shake-float-above-box 250ms 1;
}
.mdc-text-field--box.mdc-text-field--disabled {
  color: rgba(0, 0, 0, 0.38);
  border-bottom: none;
  background-color: rgba(0, 0, 0, 0.02);
}
.mdc-text-field--theme-dark.mdc-text-field--box.mdc-text-field--disabled, .mdc-theme--dark .mdc-text-field--box.mdc-text-field--disabled {
  background-color: #303030;
  color: rgba(255, 255, 255, 0.3);
  border-bottom: none;
}
.mdc-text-field--box.mdc-text-field--disabled .mdc-text-field__label {
  bottom: 20px;
}
.mdc-text-field--box.mdc-text-field--disabled .mdc-text-field__icon {
  color: rgba(0, 0, 0, 0.3);
}
.mdc-text-field--box.mdc-text-field--disabled .mdc-text-field__icon--theme-dark, .mdc-theme--dark .mdc-text-field--box.mdc-text-field--disabled .mdc-text-field__icon {
  color: rgba(255, 255, 255, 0.3);
}
.mdc-text-field--box.mdc-text-field--dense .mdc-text-field__input {
  padding: 12px 12px 0;
}
.mdc-text-field--box.mdc-text-field--dense .mdc-text-field__label {
  bottom: 20px;
}
.mdc-text-field--box.mdc-text-field--dense .mdc-text-field__label--float-above {
  transform: translateY(calc(-75% - 2px)) scale(0.923, 0.923);
}

.mdc-text-field--with-leading-icon .mdc-text-field__input {
  padding-left: 48px;
  padding-right: 15px;
}
[dir="rtl"] .mdc-text-field--with-leading-icon .mdc-text-field__input, .mdc-text-field--with-leading-icon .mdc-text-field__input[dir="rtl"] {
  padding-left: 15px;
  padding-right: 48px;
}
.mdc-text-field--with-leading-icon .mdc-text-field__icon {
  left: 15px;
  right: initial;
}
[dir="rtl"] .mdc-text-field--with-leading-icon .mdc-text-field__icon, .mdc-text-field--with-leading-icon .mdc-text-field__icon[dir="rtl"] {
  left: initial;
  right: 15px;
}
.mdc-text-field--with-leading-icon .mdc-text-field__label {
  left: 48px;
  right: initial;
}
[dir="rtl"] .mdc-text-field--with-leading-icon .mdc-text-field__label, .mdc-text-field--with-leading-icon .mdc-text-field__label[dir="rtl"] {
  left: initial;
  right: 48px;
}
.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__label--float-above {
  transform: scale(0.75) translateX(-36%) translateY(-170%);
}
[dir="rtl"] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__label--float-above, .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__label--float-above[dir="rtl"] {
  transform: scale(0.75) translateX(36%) translateY(-170%);
}
.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__label--float-above {
  transform: translateX(-25%) translateY(-145%) scale(0.923);
}
[dir="rtl"] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__label--float-above, .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__label--float-above[dir="rtl"] {
  transform: translateX(25%) translateY(-145%) scale(0.923);
}

.mdc-text-field--with-trailing-icon .mdc-text-field__input {
  padding-left: 15px;
  padding-right: 48px;
}
[dir="rtl"] .mdc-text-field--with-trailing-icon .mdc-text-field__input, .mdc-text-field--with-trailing-icon .mdc-text-field__input[dir="rtl"] {
  padding-left: 48px;
  padding-right: 15px;
}
.mdc-text-field--with-trailing-icon .mdc-text-field__icon {
  left: initial;
  right: 15px;
}
[dir="rtl"] .mdc-text-field--with-trailing-icon .mdc-text-field__icon, .mdc-text-field--with-trailing-icon .mdc-text-field__icon[dir="rtl"] {
  left: 15px;
  right: initial;
}

.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon,
.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon {
  bottom: 16px;
  transform: scale(0.8);
}

.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input {
  padding-left: 38px;
  padding-right: 12px;
}
[dir="rtl"] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input, .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input[dir="rtl"] {
  padding-left: 12px;
  padding-right: 38px;
}
.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon {
  left: 12px;
  right: initial;
}
[dir="rtl"] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon, .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon[dir="rtl"] {
  left: initial;
  right: 12px;
}
.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__label {
  left: 38px;
  right: initial;
}
[dir="rtl"] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__label, .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__label[dir="rtl"] {
  left: initial;
  right: 38px;
}

.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input {
  padding-left: 12px;
  padding-right: 38px;
}
[dir="rtl"] .mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input, .mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input[dir="rtl"] {
  padding-left: 38px;
  padding-right: 12px;
}
.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon {
  left: initial;
  right: 12px;
}
[dir="rtl"] .mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon, .mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon[dir="rtl"] {
  left: 12px;
  right: initial;
}

.mdc-text-field--upgraded:not(.mdc-text-field--fullwidth):not(.mdc-text-field--box) {
  display: inline-flex;
  position: relative;
  align-items: flex-end;
  box-sizing: border-box;
  margin-top: 16px;
}
.mdc-text-field--upgraded:not(.mdc-text-field--fullwidth):not(.mdc-text-field--box):not(.mdc-text-field--textarea):not(.mdc-text-field--outlined) {
  height: 48px;
}
.mdc-text-field--upgraded:not(.mdc-text-field--fullwidth):not(.mdc-text-field--box) .mdc-text-field__label {
  pointer-events: none;
}

.mdc-text-field--invalid .mdc-text-field__label {
  color: #d50000;
}
.mdc-text-field--invalid .mdc-text-field__input {
  border-color: #d50000;
}
.mdc-text-field--invalid .mdc-text-field__bottom-line {
  background-color: #d50000;
}
.mdc-text-field--invalid .mdc-text-field__idle-outline {
  border-color: #d50000;
}
.mdc-text-field--invalid .mdc-text-field__input:hover ~ .mdc-text-field__idle-outline {
  border-color: #d50000;
}
.mdc-text-field--invalid .mdc-text-field__outline .mdc-text-field__outline-path {
  stroke: #d50000;
}
.mdc-text-field--invalid + .mdc-text-field-helper-text--validation-msg {
  opacity: 1;
  color: #d50000;
}
.mdc-text-field--theme-dark.mdc-text-field--invalid + .mdc-text-field-helper-text--validation-msg, .mdc-theme--dark .mdc-text-field--invalid + .mdc-text-field-helper-text--validation-msg {
  color: #ff6e6e;
}

.mdc-text-field--invalid.mdc-text-field--textarea {
  border-color: #d50000;
}

.mdc-text-field--dense {
  margin-top: 12px;
  margin-bottom: 4px;
  font-size: .813rem;
}
.mdc-text-field--dense .mdc-text-field__label--float-above {
  transform: translateY(calc(-100% - 2px)) scale(0.923, 0.923);
}

.mdc-text-field--disabled {
  pointer-events: none;
}
.mdc-text-field--disabled .mdc-text-field__input {
  border-bottom: 1px dotted rgba(35, 31, 32, 0.26);
}
.mdc-text-field--theme-dark.mdc-text-field--disabled .mdc-text-field__input, .mdc-theme--dark .mdc-text-field--disabled .mdc-text-field__input {
  border-bottom: 1px dotted rgba(255, 255, 255, 0.3);
}
.mdc-text-field--disabled .mdc-text-field__input,
.mdc-text-field--disabled .mdc-text-field__label,
.mdc-text-field--disabled + .mdc-text-field-helper-text {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
}
.mdc-text-field--theme-dark .mdc-text-field--disabled .mdc-text-field__input, .mdc-theme--dark .mdc-text-field--disabled .mdc-text-field__input,
.mdc-text-field--theme-dark .mdc-text-field--disabled .mdc-text-field__label, .mdc-theme--dark .mdc-text-field--disabled .mdc-text-field__label {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5);
  color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5));
}
.mdc-text-field--theme-dark.mdc-text-field--disabled + .mdc-text-field-helper-text, .mdc-theme--dark .mdc-text-field--disabled + .mdc-text-field-helper-text {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5);
  color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5));
}
.mdc-text-field--disabled .mdc-text-field__label {
  bottom: 8px;
  cursor: default;
}

.mdc-text-field__input:required + .mdc-text-field__label::after {
  margin-left: 1px;
  content: "*";
}

.mdc-text-field--focused .mdc-text-field__input:required + .mdc-text-field__label::after {
  color: #d50000;
}
.mdc-text-field--theme-dark.mdc-text-field--focused .mdc-text-field__input:required + .mdc-text-field__label::after, .mdc-theme--dark .mdc-text-field--focused .mdc-text-field__input:required + .mdc-text-field__label::after {
  color: #ff6e6e;
}
.mdc-text-field--focused + .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg) {
  opacity: 1;
}

.mdc-text-field--textarea {
  border-radius: 4px;
  display: flex;
  height: initial;
  transition: none;
  border: 1px solid rgba(0, 0, 0, 0.73);
  overflow: hidden;
}
.mdc-text-field--textarea .mdc-text-field__label {
  border-radius: 4px 4px 0 0;
}
.mdc-text-field--textarea .mdc-text-field__input {
  border-radius: 2px;
}
.mdc-text-field--theme-dark .mdc-text-field--textarea, .mdc-theme--dark .mdc-text-field--textarea {
  border-color: white;
}
.mdc-text-field--textarea .mdc-text-field__input {
  padding: 16px;
  padding-top: 32px;
  border: 1px solid transparent;
}
.mdc-text-field--textarea .mdc-text-field__input:focus {
  /* @alternate */
  border-color: #0e5c29;
  border-color: var(--mdc-theme-primary, #0e5c29);
}
.mdc-text-field--textarea .mdc-text-field__input:invalid:not(:focus) {
  border-color: #d50000;
}
.mdc-text-field--theme-dark .mdc-text-field--textarea .mdc-text-field__input:hover, .mdc-theme--dark .mdc-text-field--textarea .mdc-text-field__input:hover {
  border-bottom-color: transparent;
}
.mdc-text-field--theme-dark .mdc-text-field--textarea .mdc-text-field__input:focus, .mdc-theme--dark .mdc-text-field--textarea .mdc-text-field__input:focus {
  /* @alternate */
  border-color: #018786;
  border-color: var(--mdc-theme-secondary, #018786);
}
.mdc-text-field--theme-dark .mdc-text-field--textarea .mdc-text-field__input:invalid:not(:focus), .mdc-theme--dark .mdc-text-field--textarea .mdc-text-field__input:invalid:not(:focus) {
  border-color: #ff6e6e;
}
.mdc-text-field--textarea .mdc-text-field__label {
  left: 1px;
  right: initial;
  top: 18px;
  bottom: auto;
  padding: 8px 16px;
  background-color: white;
}
[dir="rtl"] .mdc-text-field--textarea .mdc-text-field__label, .mdc-text-field--textarea .mdc-text-field__label[dir="rtl"] {
  left: initial;
  right: 1px;
}
.mdc-text-field--theme-dark .mdc-text-field--textarea .mdc-text-field__label, .mdc-theme--dark .mdc-text-field--textarea .mdc-text-field__label {
  background-color: #303030;
}
.mdc-text-field--textarea .mdc-text-field__label--float-above {
  transform: translateY(-50%) scale(0.923, 0.923);
}
.mdc-text-field--textarea.mdc-text-field--disabled {
  border-style: solid;
  border-color: rgba(35, 31, 32, 0.26);
  background-color: #f9f9f9;
}
.mdc-text-field--theme-dark .mdc-text-field--textarea.mdc-text-field--disabled, .mdc-theme--dark .mdc-text-field--textarea.mdc-text-field--disabled {
  border-color: rgba(255, 255, 255, 0.3);
  background-color: #2f2f2f;
}
.mdc-text-field--textarea.mdc-text-field--disabled .mdc-text-field__label {
  background-color: #f9f9f9;
}
.mdc-text-field--theme-dark .mdc-text-field--textarea.mdc-text-field--disabled .mdc-text-field__label, .mdc-theme--dark .mdc-text-field--textarea.mdc-text-field--disabled .mdc-text-field__label {
  background-color: #2f2f2f;
}
.mdc-text-field--textarea:not(.mdc-text-field--upgraded) .mdc-text-field__input {
  padding-top: 16px;
}

.mdc-text-field--textarea.mdc-text-field--focused {
  /* @alternate */
  border-color: #0e5c29;
  border-color: var(--mdc-theme-primary, #0e5c29);
}

.mdc-text-field--fullwidth {
  width: 100%;
}
.mdc-text-field--fullwidth:not(.mdc-text-field--textarea) {
  display: block;
  box-sizing: border-box;
  height: 56px;
  margin: 0;
  border: none;
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
  outline: none;
}
.mdc-text-field--fullwidth:not(.mdc-text-field--textarea) .mdc-text-field__input {
  width: 100%;
  height: 100%;
  padding: 0;
  resize: none;
  border: none !important;
}
.mdc-text-field--fullwidth--theme-dark, .mdc-theme--dark .mdc-text-field--fullwidth {
  border-bottom: 1px solid rgba(255, 255, 255, 0.12);
}

.mdc-text-field:not(.mdc-text-field--upgraded) .mdc-text-field__input {
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
}
.mdc-text-field:not(.mdc-text-field--upgraded) .mdc-text-field__input:focus {
  /* @alternate */
  border-color: #0e5c29;
  border-color: var(--mdc-theme-primary, #0e5c29);
}
.mdc-text-field:not(.mdc-text-field--upgraded) .mdc-text-field__input:disabled {
  color: rgba(0, 0, 0, 0.38);
  border-bottom-style: dotted;
}
.mdc-text-field:not(.mdc-text-field--upgraded) .mdc-text-field__input:invalid:not(:focus) {
  border-color: #d50000;
}
.mdc-text-field--theme-dark:not(.mdc-text-field--upgraded) .mdc-text-field__input:not(:focus), .mdc-theme--dark .mdc-text-field:not(.mdc-text-field--upgraded) .mdc-text-field__input:not(:focus) {
  border-color: rgba(255, 255, 255, 0.5);
}
.mdc-text-field--theme-dark:not(.mdc-text-field--upgraded) .mdc-text-field__input:disabled, .mdc-theme--dark .mdc-text-field:not(.mdc-text-field--upgraded) .mdc-text-field__input:disabled {
  color: rgba(255, 255, 255, 0.3);
  border-color: rgba(255, 255, 255, 0.3);
  background-color: #2f2f2f;
}
.mdc-text-field--theme-dark:not(.mdc-text-field--upgraded) .mdc-text-field__input:invalid:not(:focus), .mdc-theme--dark .mdc-text-field:not(.mdc-text-field--upgraded) .mdc-text-field__input:invalid:not(:focus) {
  border-color: #ff6e6e;
}

.mdc-text-field--outlined:not(.mdc-text-field--upgraded) {
  height: 56px;
}
.mdc-text-field--outlined:not(.mdc-text-field--upgraded) .mdc-text-field__input {
  border-radius: 4px;
  height: 100%;
  padding: 0 0 0 12px;
  border: 1px solid rgba(0, 0, 0, 0.12);
}
.mdc-text-field--outlined:not(.mdc-text-field--upgraded) .mdc-text-field__input:hover {
  border-color: rgba(0, 0, 0, 0.87);
}
.mdc-text-field--outlined:not(.mdc-text-field--upgraded) .mdc-text-field__input:focus {
  /* @alternate */
  border-color: #0e5c29;
  border-color: var(--mdc-theme-primary, #0e5c29);
}

.mdc-text-field--box:not(.mdc-text-field--upgraded) {
  height: 56px;
}
.mdc-text-field--box:not(.mdc-text-field--upgraded)::before, .mdc-text-field--box:not(.mdc-text-field--upgraded)::after {
  border-radius: 0;
}
.mdc-text-field--box:not(.mdc-text-field--upgraded) .mdc-text-field__input {
  padding-top: 0;
}

.mdc-text-field--dense + .mdc-text-field-helper-text {
  margin-bottom: 4px;
}
.mdc-text-field--box + .mdc-text-field-helper-text {
  margin-right: 16px;
  margin-left: 16px;
}

.mdc-form-field > .mdc-text-field + label {
  align-self: flex-start;
}

/* CHECKBOX */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
@keyframes mdc-checkbox-unchecked-checked-checkmark-path {
  0%,
  50% {
    stroke-dashoffset: 29.7833385;
  }
  50% {
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
  100% {
    stroke-dashoffset: 0;
  }
}
@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark {
  0%,
  68.2% {
    transform: scaleX(0);
  }
  68.2% {
    animation-timing-function: cubic-bezier(0, 0, 0, 1);
  }
  100% {
    transform: scaleX(1);
  }
}
@keyframes mdc-checkbox-checked-unchecked-checkmark-path {
  from {
    animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
    opacity: 1;
    stroke-dashoffset: 0;
  }
  to {
    opacity: 0;
    stroke-dashoffset: -29.7833385;
  }
}
@keyframes mdc-checkbox-checked-indeterminate-checkmark {
  from {
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    transform: rotate(0deg);
    opacity: 1;
  }
  to {
    transform: rotate(45deg);
    opacity: 0;
  }
}
@keyframes mdc-checkbox-indeterminate-checked-checkmark {
  from {
    animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    transform: rotate(45deg);
    opacity: 0;
  }
  to {
    transform: rotate(360deg);
    opacity: 1;
  }
}
@keyframes mdc-checkbox-checked-indeterminate-mixedmark {
  from {
    animation-timing-function: mdc-animation-deceleration-curve-timing-function;
    transform: rotate(-45deg);
    opacity: 0;
  }
  to {
    transform: rotate(0deg);
    opacity: 1;
  }
}
@keyframes mdc-checkbox-indeterminate-checked-mixedmark {
  from {
    animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    transform: rotate(0deg);
    opacity: 1;
  }
  to {
    transform: rotate(315deg);
    opacity: 0;
  }
}
@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark {
  0% {
    animation-timing-function: linear;
    transform: scaleX(1);
    opacity: 1;
  }
  32.8%,
  100% {
    transform: scaleX(0);
    opacity: 0;
  }
}
.mdc-checkbox {
  display: inline-block;
  position: relative;
  flex: 0 0 18px;
  box-sizing: content-box;
  width: 18px;
  height: 18px;
  padding: 11px;
  line-height: 0;
  white-space: nowrap;
  cursor: pointer;
  vertical-align: bottom;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
}
.mdc-checkbox .mdc-checkbox__native-control:disabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background {
  border-color: rgba(0, 0, 0, 0.26);
}
.mdc-checkbox .mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background,
.mdc-checkbox .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background {
  border-color: transparent;
  background-color: rgba(0, 0, 0, 0.26);
}
.mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:disabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background {
  border-color: rgba(255, 255, 255, 0.3);
}
.mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background,
.mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background,
.mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background {
  background-color: rgba(255, 255, 255, 0.3);
}
.mdc-checkbox .mdc-checkbox__checkmark__path {
  stroke: white !important;
}
.mdc-checkbox .mdc-checkbox__mixedmark {
  background-color: white;
}
.mdc-checkbox .mdc-checkbox__background::before {
  /* @alternate */
  background-color: #018786;
}
@supports not (-ms-ime-align: auto) {
  .mdc-checkbox .mdc-checkbox__background::before {
    background-color: var(--mdc-theme-secondary, #018786);
  }
}
.mdc-checkbox::before, .mdc-checkbox::after {
  position: absolute;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
}
.mdc-checkbox::before {
  transition: opacity 15ms linear;
}
.mdc-checkbox.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  transform: scale(0);
  transform-origin: center center;
}
.mdc-checkbox.mdc-ripple-upgraded--unbounded::after {
  top: var(--mdc-ripple-top, 0);
  left: var(--mdc-ripple-left, 0);
}
.mdc-checkbox.mdc-ripple-upgraded--foreground-activation::after {
  animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-checkbox.mdc-ripple-upgraded--foreground-deactivation::after {
  animation: 150ms mdc-ripple-fg-opacity-out;
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
}
.mdc-checkbox::before, .mdc-checkbox::after {
  /* @alternate */
  background-color: #018786;
}
@supports not (-ms-ime-align: auto) {
  .mdc-checkbox::before, .mdc-checkbox::after {
    background-color: var(--mdc-theme-secondary, #018786);
  }
}
.mdc-checkbox:hover::before {
  opacity: 0.04;
}
.mdc-checkbox:not(.mdc-ripple-upgraded):focus::before, .mdc-checkbox.mdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.12;
}
.mdc-checkbox:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-checkbox:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.16;
}
.mdc-checkbox.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity;
}
.mdc-checkbox::before, .mdc-checkbox::after {
  top: calc(50% - 50%);
  left: calc(50% - 50%);
  width: 100%;
  height: 100%;
}
.mdc-checkbox.mdc-ripple-upgraded::before {
  top: calc(50% - 50%);
  left: calc(50% - 50%);
  width: 100%;
  height: 100%;
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-checkbox.mdc-ripple-upgraded--unbounded::before {
  top: var(--mdc-ripple-top, calc(50% - 25%));
  left: var(--mdc-ripple-left, calc(50% - 25%));
  width: var(--mdc-ripple-fg-size, 50%);
  height: var(--mdc-ripple-fg-size, 50%);
  transform: scale(var(--mdc-ripple-fg-scale, 0));
}
.mdc-checkbox.mdc-ripple-upgraded::after {
  width: var(--mdc-ripple-fg-size, 50%);
  height: var(--mdc-ripple-fg-size, 50%);
}
.mdc-checkbox .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background {
  border-color: rgba(0, 0, 0, 0.54);
  background-color: transparent;
}
.mdc-checkbox .mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background,
.mdc-checkbox .mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background {
  /* @alternate */
  border-color: #018786;
  border-color: var(--mdc-theme-secondary, #018786);
  /* @alternate */
  background-color: #018786;
  background-color: var(--mdc-theme-secondary, #018786);
}
@keyframes mdc-checkbox-fade-in-background-0 {
  0% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent;
  }
  50% {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786);
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786);
  }
}
@keyframes mdc-checkbox-fade-out-background-0 {
  0%,
    80% {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786);
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786);
  }
  100% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent;
  }
}
.mdc-checkbox.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {
  animation-name: mdc-checkbox-fade-in-background-0;
}
.mdc-checkbox.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {
  animation-name: mdc-checkbox-fade-out-background-0;
}
.mdc-checkbox--theme-dark .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background {
  border-color: white;
  background-color: transparent;
}
.mdc-checkbox--theme-dark .mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background,
.mdc-checkbox--theme-dark .mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background,
.mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background {
  /* @alternate */
  border-color: #018786;
  border-color: var(--mdc-theme-secondary, #018786);
  /* @alternate */
  background-color: #018786;
  background-color: var(--mdc-theme-secondary, #018786);
}
@keyframes mdc-checkbox-fade-in-background-1 {
  0% {
    border-color: white;
    background-color: transparent;
  }
  50% {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786);
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786);
  }
}
@keyframes mdc-checkbox-fade-out-background-1 {
  0%,
    80% {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786);
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786);
  }
  100% {
    border-color: white;
    background-color: transparent;
  }
}
.mdc-checkbox--theme-dark.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {
  animation-name: mdc-checkbox-fade-in-background-1;
}
.mdc-checkbox--theme-dark.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {
  animation-name: mdc-checkbox-fade-out-background-1;
}

.mdc-checkbox--disabled {
  cursor: default;
  pointer-events: none;
}

.mdc-checkbox--upgraded .mdc-checkbox__background,
.mdc-checkbox--upgraded .mdc-checkbox__checkmark,
.mdc-checkbox--upgraded .mdc-checkbox__checkmark__path,
.mdc-checkbox--upgraded .mdc-checkbox__mixedmark {
  transition: none !important;
}

.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background, .mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background, .mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background, .mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background {
  animation-duration: 180ms;
  animation-timing-function: linear;
}
.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark__path {
  animation: 180ms linear 0s mdc-checkbox-unchecked-checked-checkmark-path;
  transition: none;
}
.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark {
  animation: 90ms linear 0s mdc-checkbox-unchecked-indeterminate-mixedmark;
  transition: none;
}
.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark__path {
  animation: 90ms linear 0s mdc-checkbox-checked-unchecked-checkmark-path;
  transition: none;
}
.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark {
  animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-checkmark;
  transition: none;
}
.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark {
  animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-mixedmark;
  transition: none;
}
.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark {
  animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-checkmark;
  transition: none;
}
.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark {
  animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-mixedmark;
  transition: none;
}
.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark {
  animation: 300ms linear 0s mdc-checkbox-indeterminate-unchecked-mixedmark;
  transition: none;
}

.mdc-checkbox__background {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  left: 11px;
  right: initial;
  display: inline-flex;
  top: 11px;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  width: 45%;
  height: 45%;
  transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  border: 2px solid currentColor;
  border-radius: 2px;
  background-color: transparent;
  pointer-events: none;
  will-change: background-color, border-color;
}
[dir="rtl"] .mdc-checkbox .mdc-checkbox__background, .mdc-checkbox[dir="rtl"] .mdc-checkbox__background {
  left: initial;
  right: 11px;
}
.mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background, .mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background {
  transition: border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1);
}

.mdc-checkbox__background::before {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform: scale(0, 0);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
  will-change: opacity, transform;
}
.mdc-checkbox__native-control:focus ~ .mdc-checkbox__background::before {
  transform: scale(2.75, 2.75);
  transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: 0.26;
}
.mdc-ripple-upgraded--unbounded .mdc-checkbox__background::before {
  content: none;
}

.mdc-checkbox__native-control {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  opacity: 0;
  cursor: inherit;
}
.mdc-checkbox__native-control:disabled {
  cursor: default;
  pointer-events: none;
}

.mdc-checkbox__checkmark {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  transition: opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  opacity: 0;
}
.mdc-checkbox--upgraded .mdc-checkbox__checkmark {
  opacity: 1;
}
.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__checkmark {
  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: 1;
}
.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__checkmark {
  transform: rotate(45deg);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  opacity: 0;
}

.mdc-checkbox__checkmark__path {
  transition: stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  stroke-width: 3.12px;
  stroke-dashoffset: 29.7833385;
  stroke-dasharray: 29.7833385;
}
.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__checkmark__path, .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__checkmark__path {
  stroke-dashoffset: 0;
}

.mdc-checkbox__mixedmark {
  width: 100%;
  height: 2px;
  transform: scaleX(0) rotate(0deg);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  opacity: 0;
}
.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {
  transform: scaleX(1) rotate(-45deg);
}
.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {
  transform: scaleX(1) rotate(0deg);
  opacity: 1;
}